//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MIDIControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MIDIControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MIDIControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MIDIControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""f5a15c26-1d0f-4ce9-8212-8c681dc11ba8"",
            ""actions"": [
                {
                    ""name"": ""Tree1"",
                    ""type"": ""Value"",
                    ""id"": ""93cea303-24a6-442d-97a5-57960bbe99d3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold(duration=1.401298E-45)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tree2"",
                    ""type"": ""Value"",
                    ""id"": ""addf489a-91bd-4c6e-8e47-06a3afcb8511"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Explosion"",
                    ""type"": ""Value"",
                    ""id"": ""cd4a1332-acbb-448a-815d-19b5d21f5769"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LightUp1"",
                    ""type"": ""Value"",
                    ""id"": ""b4509cf4-3b29-4ff4-b6e8-6a69e1d7c8ca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""01726e5f-cd62-4321-a00e-b6e19a5281bc"",
                    ""path"": ""<MidiDevice>/note036"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tree1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10d7ad81-0168-4114-8cbb-00a2720feb5b"",
                    ""path"": ""<MidiDevice>/note043"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tree2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47fc0a12-f47f-4242-81a3-810aa73185da"",
                    ""path"": ""<MidiDevice>/note044"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Explosion"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""892aa9ee-c2de-4af8-9e98-a75293acf876"",
                    ""path"": ""<MidiDevice>/note039"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LightUp1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Tree1 = m_Gameplay.FindAction("Tree1", throwIfNotFound: true);
        m_Gameplay_Tree2 = m_Gameplay.FindAction("Tree2", throwIfNotFound: true);
        m_Gameplay_Explosion = m_Gameplay.FindAction("Explosion", throwIfNotFound: true);
        m_Gameplay_LightUp1 = m_Gameplay.FindAction("LightUp1", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Tree1;
    private readonly InputAction m_Gameplay_Tree2;
    private readonly InputAction m_Gameplay_Explosion;
    private readonly InputAction m_Gameplay_LightUp1;
    public struct GameplayActions
    {
        private @MIDIControls m_Wrapper;
        public GameplayActions(@MIDIControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tree1 => m_Wrapper.m_Gameplay_Tree1;
        public InputAction @Tree2 => m_Wrapper.m_Gameplay_Tree2;
        public InputAction @Explosion => m_Wrapper.m_Gameplay_Explosion;
        public InputAction @LightUp1 => m_Wrapper.m_Gameplay_LightUp1;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Tree1.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTree1;
                @Tree1.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTree1;
                @Tree1.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTree1;
                @Tree2.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTree2;
                @Tree2.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTree2;
                @Tree2.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTree2;
                @Explosion.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnExplosion;
                @Explosion.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnExplosion;
                @Explosion.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnExplosion;
                @LightUp1.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLightUp1;
                @LightUp1.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLightUp1;
                @LightUp1.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLightUp1;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Tree1.started += instance.OnTree1;
                @Tree1.performed += instance.OnTree1;
                @Tree1.canceled += instance.OnTree1;
                @Tree2.started += instance.OnTree2;
                @Tree2.performed += instance.OnTree2;
                @Tree2.canceled += instance.OnTree2;
                @Explosion.started += instance.OnExplosion;
                @Explosion.performed += instance.OnExplosion;
                @Explosion.canceled += instance.OnExplosion;
                @LightUp1.started += instance.OnLightUp1;
                @LightUp1.performed += instance.OnLightUp1;
                @LightUp1.canceled += instance.OnLightUp1;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnTree1(InputAction.CallbackContext context);
        void OnTree2(InputAction.CallbackContext context);
        void OnExplosion(InputAction.CallbackContext context);
        void OnLightUp1(InputAction.CallbackContext context);
    }
}
